
-- BTREE definition

-- key functions and operators

CREATE FUNCTION spherekey_lt(spherekey,spherekey)
   RETURNS bool
   AS 'MODULE_PATHNAME' , 'spherekey_lt'
   LANGUAGE 'C';   

CREATE FUNCTION spherekey_le(spherekey,spherekey)
   RETURNS bool
   AS 'MODULE_PATHNAME' , 'spherekey_le'
   LANGUAGE 'C';   

CREATE FUNCTION spherekey_eq(spherekey,spherekey)
   RETURNS bool
   AS 'MODULE_PATHNAME' , 'spherekey_eq'
   LANGUAGE 'C';   

CREATE FUNCTION spherekey_eq_neg(spherekey,spherekey)
   RETURNS bool
   AS 'MODULE_PATHNAME' , 'spherekey_eq_neg'
   LANGUAGE 'C';

CREATE FUNCTION spherekey_ge(spherekey,spherekey)
   RETURNS bool
   AS 'MODULE_PATHNAME' , 'spherekey_ge'
   LANGUAGE 'C';   

CREATE FUNCTION spherekey_gt(spherekey,spherekey)
   RETURNS bool
   AS 'MODULE_PATHNAME' , 'spherekey_gt'
   LANGUAGE 'C';   

CREATE OPERATOR  = (
   LEFTARG    = spherekey,
   RIGHTARG   = spherekey,
   COMMUTATOR = =,
   NEGATOR    = <>,
   PROCEDURE  = spherekey_eq,
   RESTRICT   = contsel,
   JOIN       = contjoinsel 
);

CREATE OPERATOR  <> (
   LEFTARG    = spherekey,
   RIGHTARG   = spherekey,
   COMMUTATOR = <>,
   NEGATOR    = =,
   PROCEDURE  = spherekey_eq_neg,
   RESTRICT   = contsel,
   JOIN       = contjoinsel 
);

CREATE OPERATOR  < (
   LEFTARG    = spherekey,
   RIGHTARG   = spherekey,
   COMMUTATOR = >,
   PROCEDURE  = spherekey_lt,
   RESTRICT   = contsel,
   JOIN       = contjoinsel 
);

CREATE OPERATOR  <= (
   LEFTARG    = spherekey,
   RIGHTARG   = spherekey,
   COMMUTATOR = >=,
   PROCEDURE  = spherekey_le,
   RESTRICT   = contsel,
   JOIN       = contjoinsel 
);

CREATE OPERATOR  >= (
   LEFTARG    = spherekey,
   RIGHTARG   = spherekey,
   COMMUTATOR = <=,
   PROCEDURE  = spherekey_ge,
   RESTRICT   = contsel,
   JOIN       = contjoinsel 
);

CREATE OPERATOR  > (
   LEFTARG    = spherekey,
   RIGHTARG   = spherekey,
   COMMUTATOR = <,
   PROCEDURE  = spherekey_gt,
   RESTRICT   = contsel,
   JOIN       = contjoinsel 
);


CREATE FUNCTION spherekey_cmp ( spherekey, spherekey )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'spherekey_cmp'
   LANGUAGE 'C';

CREATE FUNCTION spherepoint_cmp ( spoint, spoint )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'spherepoint_cmp'
   LANGUAGE 'C';

CREATE FUNCTION spherecircle_cmp ( scircle, scircle )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'spherecircle_cmp'
   LANGUAGE 'C';

CREATE FUNCTION sphereline_cmp ( sline, sline )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'sphereline_cmp'
   LANGUAGE 'C';

CREATE FUNCTION sphereellipse_cmp ( sellipse, sellipse )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'sphereellipse_cmp'
   LANGUAGE 'C';

CREATE FUNCTION spherepoly_cmp ( spoly, spoly )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'spherepoly_cmp'
   LANGUAGE 'C';

CREATE FUNCTION spherepath_cmp ( spath, spath )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'spherepath_cmp'
   LANGUAGE 'C';

CREATE FUNCTION spherebox_cmp ( sbox, sbox )
   RETURNS int4
   AS 'MODULE_PATHNAME' , 'spherebox_cmp'
   LANGUAGE 'C';

-- create the operator class for spherical points

  CREATE OPERATOR CLASS spherekey_opc
  DEFAULT FOR TYPE spherekey USING btree
  AS
    OPERATOR        1       <   ,
    OPERATOR        2       <=  ,
    OPERATOR        3       =   ,
    OPERATOR        4       >=  ,
    OPERATOR        5       >   ,
    FUNCTION        1       spherekey_cmp ( spherekey, spherekey )
  ;

  CREATE OPERATOR CLASS spoint_opc
  DEFAULT FOR TYPE spoint USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       spherepoint_cmp ( spoint, spoint )
  ;

  CREATE OPERATOR CLASS scircle_opc
  DEFAULT FOR TYPE scircle USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       spherecircle_cmp ( scircle, scircle )
  ;

  CREATE OPERATOR CLASS sline_opc
  DEFAULT FOR TYPE sline USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       sphereline_cmp ( sline, sline )
  ;

  CREATE OPERATOR CLASS sellipse_opc
  DEFAULT FOR TYPE sellipse USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       sphereellipse_cmp ( sellipse, sellipse )
  ;

  CREATE OPERATOR CLASS spolygon_opc
  DEFAULT FOR TYPE spoly USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       spherepoly_cmp ( spoly, spoly )
  ;

  CREATE OPERATOR CLASS spath_opc
  DEFAULT FOR TYPE spath USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       spherepath_cmp ( spath, spath )
  ;

  CREATE OPERATOR CLASS sbox_opc
  DEFAULT FOR TYPE sbox USING btree
  AS
    OPERATOR        3       = RECHECK ,
    FUNCTION        1       spherebox_cmp ( sbox, sbox )
  ;

